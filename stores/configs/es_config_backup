# 设置集群配置，transient瞬态，pesistent持久态
PUT /_cluster/settings
{
    "transient": {
        "cluster.routing.allocation.enable" : "all",
        "cluster.routing.allocation.disk.watermark.low": "90%"
    }
}
# 查看未分配的索引和原因
GET _cluster/allocation/explain?pretty


#ES基础语法
#非结构化地创建一个索引
PUT /employee
{
   "settings" : {
      "number_of_shards" : 1,
      "number_of_replicas" : 1
   }
}
#分布式节点建设
#更新其replicas状态，但是不能更新shards状态
PUT /test/_settings
{
   "settings" : {
      "number_of_replicas" : 0
   }
}
#创建索引，指定id建立索引
PUT /employee/_doc/1
{
    "name": "凯杰",
    "age": 30
}
#创建索引，指定id建立索引
PUT /employee/_doc/1
{
    "name": "凯杰",
    "age": 30
}
PUT /employee/_doc/2
{
    "name": "凯杰345",
    "age": 40
}
PUT /employee/_doc/3
{
    "name": "凯杰3",
    "age": 50
}
PUT /employee/_doc/4
{
    "name": "凯杰4",
    "age": 60
}
#PUT是全量修改，如果不指定age，会导致age数据消失
PUT /employee/_doc/1
{
    "name": "凯杰345",
    "age": 40
}
#使用POST+upadte指定字段部分修改，避免数据丢失
POST /employee/_update/1
{
  "doc": {
    "name": "凯杰2223"
  }
}
#指定_create防止重复创建，如果已创建则失败
POST /employee/_create/1/
{
    "name": "凯1213132杰",
    "age": 30
}
#使用搜索全部，默认自带分页，不会显示全部
GET /employee/_search
#获取指定id
GET /employee/_doc/1
#不指定id建立索引
POST /employee/_doc/
{
    "name": "dsfsfsf",
    "age": 30
}
#删除文档
delete /employee/_doc/1
#删除索引
DELETE /employee


#使用结构化方式创建索引
#可以防止脏数据插入
PUT /employee/
{
    "settings" : {
      "number_of_shards" : 1,
      "number_of_replicas" : 1
   },
    "mappings" : {
            "properties" : {
                "name" : { "type" : "text" },
                "age" : { "type" : "integer" }
            }

    }
}
#es查询
#简单查询：
#主键查询
GET /employee/_doc/1
#查询所有
GET /employee/_search
{
 "query":{
   "match_all": {}
 }
}
#分页查询
GET /employee/_search
{
  "query":{
    "match_all": {}
  },
  "from":0,
  "size":1
}
#复杂查询
#带条件
GET /employee/_search
{
  "query":{
    "match": {"name":"ES"}
  }
}
#带排序
GET /employee/_search
{
  "query":{
    "match": {"name":"凯杰"}
  },
  "sort":[
  	{"age":{"order":"desc"}}
  ]
}
#带聚合
#match会对关键字进行分词
#term不会分词
#query类似select
#filter类似where
#带条件会默认不适用score来判断
GET /employee/_search
{
  "query":{
    "match": {"name":"凯杰"}
  },
  "sort":[
  	{"age":{"order":"asc"}}
  ],
  "aggs":{
  	"group_by_age":{
  		"terms":{
  			"field":"age"
  		}
  	}
  }
}



#Analysis分析分词处理的结果
#一个句子被分为什么样的Token
#删除索引
DELETE /employee
#创建索引
PUT /employee/_doc/1
{
    "name": "Eating an apple a day & keeps the doctor away",
    "age": 30
}
#搜索索引，未能命中
GET /employee/_search
{
  "query":{
    "match": {"name":"eat"}
  }
}
#没搜到后使用analyze
#api查看分析处理结果，
#可以看到没有分出eat，
#所以搜不到，改成用english分词器做
GET /employee/_analyze
{
  "field":"name",
  "text":"Eating an apple a day & keeps the doctor away"
}
#重新创建索引
#指定analyzer分析器为english
#对英文文本的分词时
#效果比默认分析器好
PUT /employee
{
    "settings" : {
      "number_of_shards" : 1,
      "number_of_replicas" : 1
   },
    "mappings" : {
            "properties" : {
                "name" : { "type" : "text","analyzer": "english"},
                "age" : {"type":"integer"}
            }
    }
}
#在用analyze api，可以看到eat
GET /employee/_analyze
{
  "field":"name",
  "text":"Eating an apple a day & keeps the doctor away"
}



#玩转TMDB
#索引建立：
PUT /movie
{
   "settings" : {
      "number_of_shards" : 1,
      "number_of_replicas" : 1
   },
   "mappings": {
     "properties": {
       "title":{"type":"text","analyzer": "english"},
       "tagline":{"type":"text","analyzer": "english"},
       "release_date":{"type":"date",        "format": "8yyyy/MM/dd||yyyy/M/dd||yyyy/MM/d||yyyy/M/d"},
       "popularity":{"type":"double"},
       "cast":{
         "type":"object",
         "properties":{
           "character":{"type":"text","analyzer":"standard"},
           "name":{"type":"text","analyzer":"standard"}
         }
       },
       "overview":{"type":"text","analyzer": "english"}
     }
   }
}
#数据导入
#1.	启动importdata的jar包（下载区源代码下载）
#2.	使用http://localhost:8080/es/importdata，建立索引

#Query DSL简单实验
#match查询，按照字段上定义的分词分析后去索引内查询
GET /movie/_search
{
  "query":{
    "match":{"title":"steve"}
  }
}
#term查询，不进行词的分析，
#直接去索引查询，及搜索关键词和索引内词的精确匹配
GET /movie/_search
{
  "query":{
    "match":{"title":"steve zissou"}
  }
}
GET /movie/_search
{
  "query":{
    "term":{"title":"steve zissou"}
  }
}
#的结果区别
#3.match分词后的and和or
GET /movie/_search
{
  "query":{
    "match":{"title":"basketball with cartoom aliens"},
  }
}
#使用的是or
GET /movie/_search
{
  "query":{
    "match": {
      "title": {
        "query": "basketball with cartoom aliens",
        "operator": "and"
      }
    }
  }
}
#使用and
#4.最小词项匹配
GET /movie/_search
{
  "query":{
    "match": {
      "title": {
        "query": "basketball with cartoom aliens",
        "operator": "or" ,
        "minimum_should_match": 2
      }
    }
  }
}
#5.短语查询
GET /movie/_search
{
  "query":{
    "match_phrase":{"title":"steve zissou"}
  }
}
#短语前缀查询
GET /movie/_search
{
  "query":{
    "match_phrase_prefix":{"title":"steve zis"}
  }
}
#6.多字段查询
GET /movie/_search
{
  "query":{
    "multi_match":{
      "query":"basketball with cartoom aliens",
      "field":["title","overview"]
    }
  }
}

玩转TMDB高级查询
再次解释评分规则(tf/idf)*tfnorm：
tf：词频 这个document文档包含了多少个这个词，包含越多表明越相关
idf：逆文档频率 包含该词的文档总数目
tfnorm: 根据field长度做归一化，文档内出现频率越高，field越短越相关

操作不管是字符与还是或，按照逻辑关系命中后相加得分

GET /movie/_search
{
  "explain": true,
  "query":{
    "match":{"title":"steve"}
  }
}
查看数值，tfidf多少分，tfnorm归一化后多少分

多字段查询索引内有query分词后的结果，因为title比overview命中更重要，因此需要加权重

GET /movie/_search
{
  "query":{
    "multi_match":{
      "query":"basketball with cartoom aliens",
      "fields":["title^10","overview"],
      "tie_break":0.3
    }
  }
}
继续深入查询：
1.	Bool查询

must：必须都是true
must not： 必须都是false
should：其中有一个为true即可，但true的越多得分越高

GET /movie/_search
{
  "query":{
    "bool": {
      "should": [
        { "match": { "title":"basketball with cartoom aliens"}},
        { "match": { "overview":"basketball with cartoom aliens"}}
      ]
    }
  }
}
2.不同的multi_query的type和multi_match得分不一样
因为multi_match有很多种type
best_fields:默认，取得分最高的作为对应的分数，最匹配模式,等同于dismax模式

GET /movie/_search
{
  "query":{
    "dis_max": {
      "queries": [
        { "match": { "title":"basketball with cartoom aliens"}},
        { "match": { "overview":"basketball with cartoom aliens"}}
      ]
    }
  }
}
然后使用explan看下 ((title:steve title:job) | (overview:steve overview:job))，打分规则

GET /movie/_validate/query?explain
{
  //"explain": true,
  "query":{
    "multi_match":{
      "query":"steve job",
      "fields":["title","overview"],
      "operator": "or",
      "type":"best_fields"
    }
  }
}
以字段为单位分别计算分词的分数，然后取最好的一个,适用于最优字段匹配。

将其他因素以0.3的倍数考虑进去

GET /movie/_search
{
  "query":{
    "dis_max": {
      "queries": [
        { "match": { "title":"basketball with cartoom aliens"}},
        { "match": { "overview":"basketball with cartoom aliens"}}
      ],
      "tie_breaker": 0.3
    }
  }
}
most_fields:取命中的分值相加作为分数，同should match模式，加权共同影响模式

然后使用explain看下 ((title:steve title:job) | (overview:steve overview:job))~1.0，打分规则

GET /movie/_validate/query?explain
{
  //"explain": true,
  "query":{
    "multi_match":{
      "query":"steve job",
      "fields":["title","overview"],
      "operator": "or",
      "type":"most_fields"
    }
  }
}
以字段为单位分别计算分词的分数，然后加在一起，适用于都有影响的匹配

cross_fields:以分词为单位计算栏位总分
然后使用explain看下 blended(terms:[title:steve, overview:steve]) blended(terms:[title:job, overview:job])，打分规则

GET /movie/_validate/query?explain
{
  //"explain": true,
  "query":{
    "multi_match":{
      "query":"steve job",
      "fields":["title","overview"],
      "operator": "or",
      "type":"most_fields"
    }
  }
}
以词为单位，分别用词去不同的字段内取内容，拿高的分数后与其他词的分数相加，适用于词导向的匹配

GET /forum/article/_search
{
  "query": {
    "multi_match": {
      "query": "Peter Smith",
      "type": "cross_fields",
      "operator": "or",
      "fields": ["author_first_name", "author_last_name"]
    }
  }
}
//要求Peter必须在author_first_name或author_last_name中出现
//要求Smith必须在author_first_name或author_last_name中出现

//原来most_fiels，可能像Smith //Williams也可能会出现，因为most_fields要求只是任何一个field匹配了就可以，匹配的field越多，分数越高

GET /movie/_search
{
  "explain": true,
  "query":{
    "multi_match":{
      "query":"steve job",
      "fields":["title","overview"],
      "operator": "or",
      "type":"cross_fields"
    }
  }
}
看一下不同的评分规则

3.query string
方便的利用AND(+) OR(|) NOT(-)

GET /movie/_search
{
  "query":{
    "query_string":{
      "fields":["title"],
      "query":"steve AND jobs"

    }
  }
}


#标准分词器和IK中文分词器对比
#标准分词
GET _analyze?pretty
{
  "analyzer": "standard",
  "text":"中华人名共和国国歌"
}
#智能分词
GET _analyze?pretty
{
  "analyzer": "ik_smart",
  "text":"中华人名共和国国歌"
}
#最大化分词
#ik_max_word保证查全率
GET _analyze?pretty
{
  "analyzer": "ik_max_word",
  "text":"中华人名共和国国歌"
}
#最佳实践：索引时使用maxword，查询时使用smartword
#查询的时候使用smartword更贴近用户的语义
#建立索引时使用maxword最大化分词
#smartword使用贪心算法，maxword使用最大努力算法
#"search_analyzer": "",

#门店全量索引构建，先定义索引结构
#1、字段设置与数据库一致
#2、name作为构建索引和查找的关键字，
#   构建索引时使用maxword，查找时使用smart
#3、tags作为构建索引和查找的关键字，
#   使用whitespace作为分词器，使用空格来分词
#   fielddata = true才能支持 tags字段用于做聚合
#4、text和keyword的差别，
#   text可以带analyzer做分词，
#   而keyword当作普通的string存入(完全匹配)
#5、
PUT /shop?include_type_name=false
{
   "settings" : {
      "number_of_shards" : 3,
      "number_of_replicas" : 2
   },
   "mappings": {
     "properties": {
       "id":{"type":"integer"},
       "name":{"type":"text","analyzer": "ik_max_word","search_analyzer":"ik_smart"},
       "tags":{"type":"text","analyzer": "whitespace","fielddata":true},
       "location":{"type":"geo_point"},
       "remark_score":{"type":"double"},
       "price_per_man":{"type":"integer"},
       "category_id":{"type":"integer"},
       "category_name":{"type":"keyword"},
       "seller_id":{"type":"integer"},
       "seller_remark_score":{"type":"double"},
       "seller_disabled_flag":{"type":"integer"}
     }
   }
}


#使用logstash进行全量索引创建后进行搜索
然后用restful low api直接写json获取，先设置replace模式，看到花悦***很高，因为没有考虑词因素，加入词因素后，花悦沉底

过于复杂的模型请求可以通过JSONObject拼装请求
GET /shop/_search
{

}

基本调试
先完成最基本的测试

GET /shop/_search
{
  "query":{
   "match":{
     "name":"凯悦"
    }
  }
}
#输出4个内容，花悦也出来了，用工具分析
GET _analyze?pretty
{
  "analyzer": "ik_smart",
  "text":"凯悦"
}
GET /shop/_analyze
{
  "analyzer": "ik_smart",
  "text":"凯悦"
}
GET /shop/_analyze
{
  "analyzer": "ik_max_word",
  "text":"花悦庭果木烤鸭"
}
#查看到分词出凯和悦，而花悦也会被分出花和悦两个字，
#因此匹配上
#然后拓展为搜索凯悦酒店，
#发现酒店相关的内容也出来了
#带上距离字段
# source表示使用havesin的函数，
#   前两个是params的入参的值，后两个是文档内的字段的值
# lang表示使用的语言是expression
# params表示script脚本的入参
GET /shop/_search
{
  "query":{
    "match": {"name":"凯悦"}
  },
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.37,"lon":127.12}
      }
    }
  }
}
#通过距离排序
GET /shop/_search
{
  "query":{
    "match": {"name":"凯悦"}
  },
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.37,"lon":127.12}
      }
    }
  },
   "sort": [
    {
      "_geo_distance": {
        "location": {
          "lat":  31.37,
          "lon": 127.12
        },
        "order":         "asc",
        "unit":          "km",
        "distance_type": "arc"
      }
    }
  ]
}
#使用function score解决排序模型
GET /shop/_search
{
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.24916171,"lon":121.48789949}
      }
    }
  },
  "query":{
    "function_score": {
      "query":{
        "bool":{
          "must":[
              {"match": {"name":{"query":"凯悦"}}},
              {"term":{"seller_disabled_flag": 0}}
            ]
        }
      }
    }
  }
}
#综合智能排序，并加入商家禁用字段
#boost mode替换为replace
#则表示直接用functions的得分替换
GET /shop/_search
{
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.24916171,"lon":121.48789949}
      }
    }
  },
  "query":{
    "function_score": {
      "query":{
        "bool":{
          "must":[
              {"match": {"name":{"query":"凯悦","boost":0.1}}},
              {"term":{"seller_disabled_flag": 0}}
            ]
        }
      }
    }
  }
}
#加入categoryid过滤
#boost mode替换为replace，则不考虑text文本相关性
#则表示直接用functions的得分替换
GET /shop/_search
{
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.24916171,"lon":121.48789949}
      }
    }
  },
  "query":{
    "function_score": {
      "query":{
        "bool":{
          "must":[
              {"match": {"name":{"query":"凯悦","boost":0.1}}},
              {"term":{"seller_disabled_flag": 0}},
              {"term":{"category_id": 2}}
            ]
        }
      },
    "functions":[
        {
          "gauss": {
            "location": {
              "origin": "31.24916171, 121.48789949",
              "scale": "100km",
              "offset":"0km",
              "decay": 0.5
            }
          },
          "weight":9
        },
        {
          "field_value_factor": {
          "field": "remark_score"
          },
          "weight":0.2
        },
        {
          "field_value_factor": {
          "field": "seller_remark_score"
          },
          "weight":0.1
        }
      ],
      "score_mode": "sum",
      "boost_mode": "sum"
    }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ]
}
#加入低价排序
GET /shop/_search
{
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.24916171,"lon":121.48789949}
      }
    }
  },
  "query":{

    "function_score": {
      "query":{
        "bool":{
          "must":[
              {"match": {"name":{"query":"凯悦","boost":0.1}}},
              {"term":{"seller_disabled_flag": 0}},
              {"term":{"category_id": 2}}
            ]
        }
      },
    "functions":[
        {
          "field_value_factor": {
          "field": "price_per_man"
          },
          "weight":1
        }
      ],
      "score_mode": "sum",
      "boost_mode": "replace"
    }
  },
  "sort": [
    {
      "_score": {
        "order": "asc"
      }
    }
  ]
}
#开始集成aggs，可以看到默认使用whitespace分词了
GET /shop/_search
{
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.24916171,"lon":121.48789949}
      }
    }
  },
  "query":{
    "function_score": {
       "query":{
        "bool":{
          "must":[
              {"match": {"name":{"query":"凯悦","boost":0.1}}},
              {"term":{"seller_disabled_flag": 0}}
            ]
        }

      },

    "functions":[
        {
          "gauss": {
            "location": {
              "origin": "31.24916171, 121.48789949",
              "scale": "100km",
              "offset":"0km",
              "decay": 0.5
            }
          },
          "weight":5
        },
        {
          "field_value_factor": {
          "field": "remark_score"
          },
          "weight":0.2
        },
        {
          "field_value_factor": {
          "field": "seller_remark_score"
          },
          "weight":0.1
        }
      ],
      "score_mode": "sum",
      "boost_mode": "sum"
    }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ],
  "aggs":{
    "group_by_tags":{
      "terms":{
        "field":"tags"
      }
    }
  }
}
#开始集成aggs，可以看到默认使用whitespace分词了
GET /shop/_search
{
  "_source": "*",
  "script_fields":{
    "distance":{
      "script":{
      "source":"haversin(lat, lon, doc['location'].lat, doc['location'].lon)",
      "lang":"expression",
      "params":{"lat":31.24916171,"lon":121.48789949}
      }
    }
  },
  "query":{
    "function_score": {
       "query":{
        "bool":{
          "must":[
              {"match": {"name":{"query":"凯悦","boost":0.1}}},
              {"term":{"seller_disabled_flag": 0}},
              {"term":{"tags": "落地大窗"}}
            ]
        }

      },

    "functions":[
        {
          "gauss": {
            "location": {
              "origin": "31.24916171, 121.48789949",
              "scale": "100km",
              "offset":"0km",
              "decay": 0.5
            }
          },
          "weight":9
        },
        {
          "field_value_factor": {
          "field": "remark_score"
          },
          "weight":0.2
        },
        {
          "field_value_factor": {
          "field": "seller_remark_score"
          },
          "weight":0.1
        }
      ],
      "score_mode": "sum",
      "boost_mode": "sum"
    }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ],
  "aggs":{
    "group_by_tags":{
      "terms":{
        "field":"tags"
      }
    }
  }
}